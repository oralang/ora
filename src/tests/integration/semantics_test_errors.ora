// Test contract with deliberate semantic errors
// This contract tests the semantic analyzer's error detection:
// - Missing init function
// - Storage variables in functions
// - Immutable variable violations
// - Invalid memory region usage
// - Uninitialized variables
// - Type mismatches

contract SemanticsErrorTestContract {
    // Valid storage variables
    storage validStorage: u256;
    
    // Immutable variables that won't be initialized
    immutable uninitializedImmutable: u256;
    
    // Const variable without initializer (ERROR)
    const INVALID_CONST: u256; // ERROR: const without initializer
    
    // Duplicate error declarations (ERROR)
    error TestError;
    error TestError; // ERROR: duplicate error
    
    // Note: Missing init function (ERROR)
    
    // Function with storage variables declared inside (ERROR)
    function invalidStorageInFunction() public {
        storage invalidVar: u256 = 42; // ERROR: storage in function
        return;
    }
    
    // Function trying to modify immutable outside constructor (ERROR) 
    function modifyImmutable() public {
        uninitializedImmutable = 100; // ERROR: immutable modification outside constructor
    }
    
    // Function with old() in requires clause (ERROR)
    function invalidRequires(value: u256)
    requires old(validStorage) > 0 // ERROR: old() in requires
    {
        validStorage = value;
    }
    
    // Function with return type but no return statement (ERROR)
    function missingReturn() -> u256 public {
        let temp: u256 = 42;
        // ERROR: missing return statement
    }
    
    // Function with division by zero (ERROR)
    function divisionByZero() -> u256 public {
        return 10 / 0; // ERROR: division by zero
    }
    
    // Function with undefined error (ERROR)
    function undefinedError() -> !u256 public {
        return UndefinedError; // ERROR: undefined error
    }
    
    // Function accessing undefined field (ERROR) 
    function invalidFieldAccess() -> u256 public {
        return transaction.invalidField; // ERROR: invalid field
    }
    
    // Function with break outside loop (ERROR)
    function breakOutsideLoop() public {
        let x: u32 = 10;
        break; // ERROR: break outside loop
    }
    
    // Function with continue outside loop (ERROR)
    function continueOutsideLoop() public {
        let y: u32 = 20;
        continue; // ERROR: continue outside loop
    }
    
    // Function with large shift amount (WARNING)
    function largeShift() -> u256 public {
        return 1 << 500; // WARNING: large shift amount
    }
    
    // Function with integer overflow (WARNING)
    function potentialOverflow() -> i8 public {
        let minValue: i8 = -128;
        return -minValue; // WARNING: negation overflow
    }
    
    // Function with try on non-error type (ERROR)
    function invalidTry() -> u256 public {
        let normalValue: u256 = 42;
        return try normalValue; // ERROR: try on non-error type
    }
    
    // Function with error cast to invalid target (ERROR)
    function invalidErrorCast() -> bool public {
        let errorValue: !u256 = TestError;
        return errorValue as bool; // ERROR: invalid error cast target
    }
    
    // Function accessing reserved field name in struct (WARNING)
    struct TestStruct {
        init: u256; // WARNING: reserved field name
        value: u256;
    }
    
    // Function with empty struct (WARNING)
    struct EmptyStruct {
        // WARNING: empty struct
    }
    
    // Function with duplicate field names in struct (ERROR)
    struct DuplicateFieldStruct {
        field1: u256;
        field1: u32; // ERROR: duplicate field name
    }
    
    // Import with invalid path (ERROR/WARNING)
    import invalid/path/module; // WARNING/ERROR: invalid import
    
    // Function with invalid identifier (ERROR)
    function 123invalidName() public { // ERROR: invalid identifier
    }
}

// Contract with duplicate init functions (ERROR)
contract DuplicateInitContract {
    function init() {
        // First init
    }
    
    function init() { // ERROR: duplicate init function
        // Second init
    }
}

// Contract with non-public init function (WARNING)
contract NonPublicInitContract {
    function init() { // WARNING: init should be public
        // Private init
    }
} 