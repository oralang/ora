fn simple_function() {}

pub fn public_function(param: u256) -> bool {
    return param > 0;
}

inline fn inline_function() -> u256 {
    return 42;
}

fn with_multiple_params(a: u256, b: string, c: address) -> bool {
    return true;
}

fn with_requires_ensures(x: u256) -> u256 
    requires(x > 0)
    ensures(result > x)
{
    return x + 1;
}

// Arrow return type sample
fn arrow_return(x: u8) -> u16 {
    // cast via @cast
    return @cast(u16, x);
}

// Invalid (documented): general union in parameter should be rejected by parser
// fn bad_union(p: struct { x: u8 } | u16) -> void {}

// Anonymous struct type parameter sample
fn takes_anon(p: struct { a: u32, b: bool }) -> void {
    return;
}

// Negative: general unions are not allowed; only error unions may use '|'
// fn bad_union_param(p: u32 | bool) -> void {}