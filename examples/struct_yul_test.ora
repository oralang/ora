// Test enhanced struct Yul code generation
contract StructYulTest {
    struct TestStruct {
        flag1: bool,
        counter: u32,
        balance: u256,
        name: string,
    }

    storage var test_storage: TestStruct;

    pub fn init() {
        test_storage = TestStruct {
            flag1: true,
            counter: 42,
            balance: 1000000,
            name: "test",
        };
    }

    pub fn getFlag() -> bool {
        return test_storage.flag1;
    }

    pub fn getCounter() -> u32 {
        return test_storage.counter;
    }

    pub fn updateCounter(new_value: u32) {
        test_storage.counter = new_value;
    }

    pub fn testMemoryStruct() -> u32 {
        memory var local_struct = TestStruct {
            flag1: false,
            counter: 100,
            balance: 2000000,
            name: "local",
        };
        
        return local_struct.counter;
    }
} 