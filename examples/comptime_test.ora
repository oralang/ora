contract ComptimeDemo {
    // These const variables should be evaluated at compile time
    storage const MAX_SUPPLY: u256 = 1000000;
    storage const HALF_SUPPLY: u256 = MAX_SUPPLY / 2;
    storage const DOUBLE_SUPPLY: u256 = MAX_SUPPLY * 2;
    
    // Boolean constants
    storage const IS_ENABLED: bool = true;
    storage const IS_DISABLED: bool = false;
    
    // Arithmetic operations that should be evaluated at compile time
    storage const COMPLEX_CALC: u256 = (100 + 50) * 2 - 25;
    storage const BITWISE_RESULT: u256 = 0xFF & 0x0F;
    storage const SHIFT_RESULT: u256 = 8 << 2;
    
    // Address constant
    storage const OWNER: address = 0x742d35Cc6634C0532925a3b8D4e6f69d2d1e7CE8;
    
    // String constant
    storage const CONTRACT_NAME: string = "ComptimeDemo";
    
    // Storage variable using const
    storage var total_supply: u256;
    
    log SupplyInitialized(supply: u256);
    log ConstantsAccessed(max: u256, half: u256, enabled: bool);
    
    pub fn init() {
        // These should use the compile-time evaluated constants
        total_supply = MAX_SUPPLY;
        
        // Demonstrate that const variables are available at runtime
        requires(total_supply == MAX_SUPPLY);
        requires(IS_ENABLED == true);
        
        log SupplyInitialized(total_supply);
    }
    
    pub fn getTotalSupply() -> u256 {
        return total_supply;
    }
    
    pub fn getConstants() -> (u256, u256, bool) {
        log ConstantsAccessed(MAX_SUPPLY, HALF_SUPPLY, IS_ENABLED);
        return (MAX_SUPPLY, HALF_SUPPLY, IS_ENABLED);
    }
    
    pub fn demonstrateComptimeCalculation() -> u256 {
        // This calculation should be done at compile time
        let calculated_value: u256 = COMPLEX_CALC + BITWISE_RESULT;
        return calculated_value;
    }
    
    pub fn testArithmeticConstants() -> u256 {
        // All these should be compile-time constants
        let result: u256 = MAX_SUPPLY + HALF_SUPPLY - DOUBLE_SUPPLY;
        return result;
    }
    
    pub fn testBitwiseConstants() -> u256 {
        // Bitwise operations on constants
        let result: u256 = BITWISE_RESULT | SHIFT_RESULT;
        return result;
    }
    
    pub fn validateOwner(addr: address) -> bool {
        return addr == OWNER;
    }
    
    pub fn getContractName() -> string {
        return CONTRACT_NAME;
    }
    
    pub fn testComplexExpression() -> u256 {
        // Complex expression using multiple constants
        let result: u256 = (MAX_SUPPLY * 2) / (HALF_SUPPLY + 1);
        return result;
    }
} 