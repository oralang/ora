// Error Recovery Example
// This file demonstrates the error recovery and diagnostic features
// Note: This file intentionally contains errors to show recovery capabilities

// Unterminated string (missing closing quote)
let missing_quote = "This string is not terminated;

// Invalid escape sequence
let bad_escape = "This has an invalid escape \q sequence";

// Invalid character literal (multiple characters)
let multi_char = 'abc';

// Empty character literal
let empty_char = '';

// Invalid binary literal (non-binary digits)
let bad_binary = 0b1012;

// Invalid hex literal (non-hex digits)
let bad_hex = 0xGHIJ;

// Invalid address (wrong length)
let short_address = 0x123456;

// Number too large
let too_large = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

// Unterminated comment
/* This comment is not terminated

// Valid code after errors (to demonstrate recovery)
let valid_after_errors = 42;
let recovered_string = "The lexer should reach this";

// Multiple errors on one line
let multiple = "unterminated + 0xGZ + 'abc';