contract SimpleToken {
    // Immutable metadata
    immutable name: string;
    immutable symbol: string;
    
    // Storage state
    storage var totalSupply: u256;
    storage var balances: map[address, u256];
    
    // Events
    log Transfer(from: address, to: address, amount: u256);
    
    // Constructor
    pub fn init(_name: string, _symbol: string, _supply: u256) {
        name = _name;
        symbol = _symbol;
        totalSupply = _supply;
        balances[std.transaction.sender] = _supply;
        log Transfer(std.constants.ZERO_ADDRESS, std.transaction.sender, _supply);
    }
    
    // Balance query
    pub fn balanceOf(owner: address) -> u256 {
        return balances[owner];
    }
    
    // Transfer function
    pub fn transfer(to: address, amount: u256) -> bool {
        requires(balances[std.transaction.sender] >= amount);
        requires(to != std.constants.ZERO_ADDRESS);
        
        balances[std.transaction.sender] -= amount;
        balances[to] += amount;
        log Transfer(std.transaction.sender, to, amount);
        return true;
    }
} 