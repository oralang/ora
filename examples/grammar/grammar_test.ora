// Ora Grammar Test File
// This file tests all major language constructs defined in the grammar

// ==========================================
// IMPORT DECLARATIONS
// ==========================================

@import("std/crypto")
@import("std/utils")

// ==========================================
// CONTRACT DECLARATIONS
// ==========================================

contract GrammarTest {
    // ==========================================
    // VARIABLE DECLARATIONS (different memory regions)
    // ==========================================
    
    // Storage variables (persistent)
    storage var total_supply: u256;
    storage let contract_name: string;
    storage const MAX_SUPPLY: u256 = 1000000;
    storage var balances: map[address, u256];
    storage var allowances: doublemap[address, address, u256];
    
    // Immutable variables (set once)
    immutable owner: address;
    immutable decimals: u8;
    
    // Memory variables (temporary)
    memory var temp_buffer: bytes;
    
    // Tstore variables (transient storage)
    tstore var temp_state: u256;
    
    // ==========================================
    // LOG DECLARATIONS (EVENTS)
    // ==========================================
    
    log Transfer(from: address, to: address, amount: u256);
    log Approval(owner: address, spender: address, amount: u256);
    log StateChanged(old_state: u256, new_state: u256);
    log ErrorOccurred(error_code: u256, message: string);
    
    // ==========================================
    // STRUCT DECLARATIONS
    // ==========================================
    
    struct User {
        balance: u256;
        last_activity: u256;
        is_active: bool;
    }
    
    struct Transaction {
        from: address;
        to: address;
        amount: u256;
        timestamp: u256;
    }
    
    // ==========================================
    // ENUM DECLARATIONS
    // ==========================================
    
    enum TokenState {
        Inactive,
        Active,
        Paused,
        Frozen = 100
    }
    
    enum ErrorCode {
        None,
        InsufficientBalance,
        InvalidAddress,
        Unauthorized
    }
    
    // ==========================================
    // FUNCTION DECLARATIONS
    // ==========================================
    
    // Constructor function
    pub fn init(initial_supply: u256, token_name: string, token_decimals: u8) {
        total_supply = initial_supply;
        contract_name = token_name;
        decimals = token_decimals;
        owner = msg.sender;
        balances[owner] = initial_supply;
        log Transfer(0x0, owner, initial_supply);
    }
    
    // Simple getter function
    pub fn get_balance(account: address) -> u256 {
        return balances[account];
    }
    
    // Function with preconditions and postconditions
    pub fn transfer(to: address, amount: u256) -> bool
        requires(balances[msg.sender] >= amount)
        requires(to != 0x0)
        requires(amount > 0)
        ensures(balances[msg.sender] + balances[to] == old(balances[msg.sender]) + old(balances[to]))
        ensures(result == true)
    {
        let sender_balance = balances[msg.sender];
        let receiver_balance = balances[to];
        
        balances[msg.sender] = sender_balance - amount;
        balances[to] = receiver_balance + amount;
        
        log Transfer(msg.sender, to, amount);
        return true;
    }
    
    // Function with compound assignments
    pub fn compound_operations(value: u256) {
        total_supply += value;
        total_supply -= value / 2;
        total_supply *= 2;
    }
    
    // Function with control flow
    pub fn conditional_logic(condition: bool, value: u256) -> u256 {
        if (condition) {
            if (value > 100) {
                return value * 2;
            } else {
                return value;
            }
        } else {
            return 0;
        }
    }
    
    // Function with loops
    pub fn loop_example(iterations: u256) -> u256 {
        let counter: u256 = 0;
        let result: u256 = 0;
        
        while (counter < iterations) {
            result += counter;
            counter += 1;
            
            if (counter > 1000) {
                break;
            }
        }
        
        return result;
    }
    
    // Function with error handling
    pub fn safe_divide(a: u256, b: u256) -> u256 | ErrorCode {
        if (b == 0) {
            return ErrorCode.InvalidAddress;
        }
        return a / b;
    }
    
    // Function with try-catch
    pub fn try_operation(value: u256) -> bool {
        try safe_divide(value, 2) catch error {
            log ErrorOccurred(1, "Division failed");
            return false;
        }
        return true;
    }
    
    // Function with transfer statement
    pub fn transfer_tokens(from: address, to: address, amount: u256) {
        balances from from -> to : amount;
        log Transfer(from, to, amount);
    }
    
    // Function with lock/unlock
    pub fn synchronized_operation(target: address) {
        @lock(balances[target]);
        let old_balance = balances[target];
        balances[target] = old_balance + 100;
        @unlock(balances[target]);
    }
    
    // Function with compile-time evaluation
    pub fn comptime_calculation() -> u256 {
        const result = comptime MAX_SUPPLY * 2;
        return result;
    }
    
    // Function with type casting
    pub fn type_conversion(value: u128) -> u256 {
        return value as u256;
    }
    
    // Function with old() expressions
    pub fn balance_preservation(account: address, amount: u256)
        ensures(balances[account] >= old(balances[account]))
    {
        balances[account] += amount;
    }
    
    // ==========================================
    // COMPLEX EXPRESSIONS
    // ==========================================
    
    pub fn expression_showcase() -> u256 {
        // Arithmetic expressions
        let arithmetic = (10 + 5) * 3 / 2 - 1;
        
        // Logical expressions
        let logical = (true && false) || (!true && false);
        
        // Comparison expressions
        let comparison = (arithmetic > 5) && (arithmetic <= 100);
        
        // Bitwise expressions (if supported)
        let bitwise = 0xFF & 0x0F;
        
        // Function calls with multiple arguments
        let function_result = safe_divide(arithmetic, 2);
        
        // Array/mapping access
        let balance = balances[msg.sender];
        let allowance = allowances[msg.sender, owner];
        
        // Field access
        let sender = msg.sender;
        let block_number = block.number;
        
        // Complex nested expression
        return (arithmetic + bitwise) * (comparison ? 1 : 0) + balance;
    }
    
    // ==========================================
    // STATEMENT TYPES
    // ==========================================
    
    pub fn statement_showcase() {
        // Variable declarations
        let local_var: u256 = 100;
        var mutable_var: u256 = 200;
        
        // Assignments
        mutable_var = local_var + 50;
        
        // Compound assignments
        mutable_var += 10;
        mutable_var -= 5;
        mutable_var *= 2;
        
        // Expression statements
        get_balance(msg.sender);
        
        // Control flow
        if (mutable_var > 100) {
            log StateChanged(0, mutable_var);
        }
        
        // Loops with control statements
        let i: u256 = 0;
        while (i < 10) {
            if (i == 5) {
                continue;
            }
            if (i == 8) {
                break;
            }
            i += 1;
        }
        
        // Return statements
        if (mutable_var > 500) {
            return;
        }
        
        // Log statements
        log StateChanged(local_var, mutable_var);
    }
    
    // ==========================================
    // ADVANCED TYPE USAGE
    // ==========================================
    
    pub fn type_showcase() {
        // Primitive types
        let small_number: u8 = 255;
        let large_number: u256 = 1000000;
        let signed_number: i128 = -42;
        let flag: bool = true;
        let addr: address = 0x1234567890123456789012345678901234567890;
        let text: string = "Hello, Ora!";
        let data: bytes = 0x1234abcd;
        
        // Array types
        let numbers: [u256; 10];
        let dynamic_array: [u8];
        
        // Mapping types
        let simple_mapping: map[address, u256];
        let double_mapping: doublemap[address, address, u256];
        
        // Optional types
        let maybe_value: ?u256;
        
        // Error union types
        let result: u256 | ErrorCode;
        
        // Custom types
        let user: User;
        let state: TokenState;
    }
}

// ==========================================
// STANDALONE FUNCTION (MODULE-LEVEL)
// ==========================================

pub fn utility_function(a: u256, b: u256) -> u256 {
    return a + b;
}

// ==========================================
// ADDITIONAL CONTRACTS FOR TESTING
// ==========================================

contract SimpleContract {
    var value: u256;
    
    pub fn init() {
        value = 0;
    }
    
    pub fn increment() {
        value += 1;
    }
}

contract InterfaceContract {
    pub fn external_function() -> bool;
}

// ==========================================
// EDGE CASES AND CORNER CASES
// ==========================================

contract EdgeCases {
    // Empty contract member lists
    
    // Functions with no parameters
    pub fn no_params() {
        // Empty function body
    }
    
    // Functions with no return type
    pub fn no_return(x: u256) {
        let _ = x;
    }
    
    // Functions with complex parameter lists
    pub fn complex_params(
        a: u256, 
        b: map[address, u256], 
        c: ?bool, 
        d: u256 | ErrorCode
    ) -> bool {
        return true;
    }
    
    // Nested blocks
    pub fn nested_blocks() {
        {
            let x: u256 = 1;
            {
                let y: u256 = 2;
                {
                    let z: u256 = x + y;
                }
            }
        }
    }
    
    // Multiple requires/ensures clauses
    pub fn multiple_clauses(x: u256) -> u256
        requires(x > 0)
        requires(x < 1000)
        ensures(result >= x)
        ensures(result <= x * 2)
    {
        return x * 2;
    }
} 