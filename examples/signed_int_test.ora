contract SignedIntTest {
    // Test signed integer declarations
    let i8_val: i8 = -128;
    let i16_val: i16 = -32768;
    let i32_val: i32 = -2147483648;
    let i64_val: i64 = -9223372036854775808;
    let i128_val: i128 = -170141183460469231731687303715884105728;
    
    // Test arithmetic operations
    let sum: i32 = 10 + (-5);  // Should be 5
    let diff: i32 = 10 - 15;   // Should be -5
    let prod: i32 = 3 * (-4);  // Should be -12
    let quot: i32 = -15 / 3;   // Should be -5
    let mod: i32 = -17 % 5;    // Should be -2
    
    // Test comparisons
    let less: bool = -5 < 5;   // Should be true
    let greater: bool = 10 > -10; // Should be true
    let equal: bool = -5 == -5;   // Should be true
    
    // Test negative literals
    let neg_literal: i8 = -42;
    
    pub fn init() {
        // Initialize the contract
    }
    
    pub fn testSignedArithmetic() {
        // Test that arithmetic works correctly
        let a: i32 = 10;
        let b: i32 = -5;
        let result: i32 = a + b;  // Should be 5
        requires(result == 5);
    }
    
    pub fn testSignedComparisons() {
        let a: i32 = -10;
        let b: i32 = 5;
        requires(a < b);
        requires(b > a);
        requires(a == -10);
    }
} 