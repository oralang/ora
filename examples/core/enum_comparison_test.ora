// Test enum comparisons - equality, ordering, and bitwise operations
contract EnumComparisonTest {
    
    // Basic enum for testing
    enum Status {
        Inactive,  // 0
        Active,    // 1
        Suspended  // 2
    }
    
    // Enum with explicit values for ordered comparison
    enum Priority : u8 {
        Low = 1,
        Medium = 5,
        High = 10
    }
    
    // Flag enum for bitwise operations
    enum Permission : u8 {
        None = 0,
        Read = 1,
        Write = 2,
        Execute = 4,
        Admin = 8
    }
    
    storage var current_status: Status;
    storage var task_priority: Priority;
    storage var user_permissions: Permission;
    
    pub fn init() {
        current_status = Status.Inactive;
        task_priority = Priority.Low;
        user_permissions = Permission.Read;
    }
    
    // Test equality comparisons
    pub fn testEqualityComparisons() -> bool {
        // Test enum equality
        let status1 = Status.Active;
        let status2 = Status.Active;
        let status3 = Status.Inactive;
        
        return (status1 == status2) && (status1 != status3);
    }
    
    // Test ordered comparisons
    pub fn testOrderedComparisons() -> bool {
        let low_priority = Priority.Low;
        let high_priority = Priority.High;
        
        // Test ordering based on discriminant values
        return (low_priority < high_priority) && 
               (high_priority > low_priority) &&
               (low_priority <= Priority.Medium) &&
               (high_priority >= Priority.Medium);
    }
    
    // Test bitwise operations for flag enums
    pub fn testBitwiseOperations() -> bool {
        let read_perm = Permission.Read;
        let write_perm = Permission.Write;
        let combined_perm = read_perm | write_perm;
        
        return (combined_perm & Permission.Read) == Permission.Read;
    }
    
    // Test enum comparisons in conditionals
    pub fn testEnumConditionals() -> string {
        if (current_status == Status.Active) {
            return "Active";
        } else if (current_status == Status.Inactive) {
            return "Inactive";
        } else if (current_status == Status.Suspended) {
            return "Suspended";
        }
        return "Unknown";
    }
    
    // Test enum comparisons with function parameters
    pub fn compareStatus(status1: Status, status2: Status) -> bool {
        return status1 == status2;
    }
    
    // Test ordered comparison with function parameters
    pub fn isHigherPriority(prio1: Priority, prio2: Priority) -> bool {
        return prio1 > prio2;
    }
    
    // Test enum state transitions
    pub fn canTransitionTo(from: Status, to: Status) -> bool {
        if (from == Status.Inactive) {
            return to == Status.Active;
        } else if (from == Status.Active) {
            return to == Status.Suspended || to == Status.Inactive;
        } else if (from == Status.Suspended) {
            return to == Status.Active || to == Status.Inactive;
        }
        return false;
    }
    
    // Test enum range validation
    pub fn isValidPriority(priority: Priority) -> bool {
        return priority >= Priority.Low && priority <= Priority.High;
    }
    
    // Test combined enum operations
    pub fn testCombinedOperations() -> bool {
        let is_active = (current_status == Status.Active);
        let is_high_priority = (task_priority >= Priority.High);
        let has_write_access = (user_permissions & Permission.Write) != Permission.None;
        
        return is_active && is_high_priority && has_write_access;
    }
} 