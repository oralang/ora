// Basic enum declaration and usage example
contract EnumBasicTest {
    
    // Simple enum with automatic discriminant assignment
    enum Status {
        Inactive,
        Active,
        Suspended
    }
    
    // Enum with explicit discriminant values
    enum Priority : u8 {
        Low = 1,
        Medium = 5,
        High = 10
    }
    
    // Enum with mixed explicit and implicit values
    enum Category {
        Draft,
        Review = 100,
        Published,
        Archived = 200
    }
    
    // Storage variable using enum type
    storage var contract_status: Status;
    storage var task_priority: Priority;
    
    // Initialize contract with default status
    pub fn init() {
        contract_status = Status.Inactive;
        task_priority = Priority.Low;
    }
    
    // Function to update contract status
    pub fn updateStatus(new_status: Status) {
        contract_status = new_status;
    }
    
    // Function to set task priority
    pub fn setPriority(priority: Priority) {
        task_priority = priority;
    }
    
    // Function to get current status
    pub fn getStatus() -> Status {
        return contract_status;
    }
    
    // Function demonstrating enum comparison
    pub fn isActive() -> bool {
        return contract_status == Status.Active;
    }
    
    // Function demonstrating enum matching
    pub fn getStatusName() -> string {
        if (contract_status == Status.Inactive) {
            return "Inactive";
        } else if (contract_status == Status.Active) {
            return "Active";
        } else if (contract_status == Status.Suspended) {
            return "Suspended";
        }
        return "Unknown";
    }
    
    // Function demonstrating priority levels
    pub fn getPriorityLevel() -> u8 {
        if (task_priority == Priority.Low) {
            return 1;
        } else if (task_priority == Priority.Medium) {
            return 5;
        } else if (task_priority == Priority.High) {
            return 10;
        }
        return 0;
    }
} 