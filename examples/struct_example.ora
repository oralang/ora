// Test struct types in Ora
contract StructExample {
    // Define a simple struct
    struct Point {
        x: u32,
        y: u32,
    }

    // Define a more complex struct
    struct Person {
        name: string,
        age: u32,
        balance: u256,
        active: bool,
    }

    // Storage variables using struct types
    storage var origin: Point;
    storage var owner: Person;

    // Function that creates and uses structs
    pub fn init() {
        // Struct instantiation
        origin = Point {
            x: 0,
            y: 0,
        };

        owner = Person {
            name: "Alice",
            age: 30,
            balance: 1000,
            active: true,
        };
    }

    // Function that accesses struct fields
    pub fn getOrigin() -> Point {
        return origin;
    }

    // Function that accesses individual struct fields
    pub fn getOriginX() -> u32 {
        return origin.x;
    }

    pub fn getPersonName() -> string {
        return owner.name;
    }

    // Function that modifies struct fields
    pub fn moveOrigin(newX: u32, newY: u32) {
        origin.x = newX;
        origin.y = newY;
    }

    // Function that creates a local struct
    pub fn createLocalPoint(x: u32, y: u32) -> Point {
        let point = Point {
            x: x,
            y: y,
        };
        return point;
    }
} 