contract OptimizationDemo {
    // Constants for optimization testing
    storage const MAX_BALANCE: u256 = 1000000;
    storage const MIN_TRANSFER: u256 = 1;
    storage const ALWAYS_TRUE: bool = true;
    storage const ALWAYS_FALSE: bool = false;
    
    // State variables
    storage var balances: map[address, u256];
    storage var total_supply: u256;
    storage var is_paused: bool;
    
    log Transfer(from: address, to: address, amount: u256);
    log OptimizationDemo(message: string);
    
    pub fn init() {
        // This should be optimized - tautology
        requires(true);
        requires(ALWAYS_TRUE);
        
        // This should be optimized - constant folding
        requires(1 + 1 == 2);
        requires(MAX_BALANCE > MIN_TRANSFER);
        
        total_supply = 0;
        is_paused = false;
    }
    
    pub fn redundantChecksDemo(amount: u256) -> bool {
        // Multiple redundant checks that could be optimized
        requires(amount > 0);
        requires(amount >= 1);  // Redundant with above since amount > 0 implies amount >= 1
        requires(amount > MIN_TRANSFER - 1);  // Should be optimized to amount >= MIN_TRANSFER
        
        // Tautological check - should be eliminated
        requires(amount == amount);
        requires(true);
        
        // Constant folding opportunities
        requires(amount <= MAX_BALANCE * 1);  // Should fold to amount <= MAX_BALANCE
        requires(amount < MAX_BALANCE + 1);   // Should fold to amount <= MAX_BALANCE
        
        return true;
    }
    
    pub fn constantFoldingDemo() -> u256 {
        // These should all be folded at compile time
        let result: u256 = 100 + 200;           // Should fold to 300
        let doubled: u256 = result * 2;         // Should fold to 600
        let final_result: u256 = doubled / 3;   // Should fold to 200
        
        // Complex constant expression
        let complex: u256 = (10 * 5) + (20 / 4) - 3;  // Should fold to 52
        
        // Using storage constants
        let with_constants: u256 = MAX_BALANCE / 2;    // Should fold to 500000
        
        return with_constants + complex;  // Should fold to 500052
    }
    
    pub fn deadCodeDemo(condition: bool) -> u256 {
        // Dead code due to constant conditions
        if (ALWAYS_TRUE) {
            log OptimizationDemo("This will always execute");
            // The else branch should be eliminated as dead code
        } else {
            log OptimizationDemo("This will never execute - DEAD CODE");
            return 999;  // This return is unreachable
        }
        
        if (ALWAYS_FALSE) {
            // This entire branch should be eliminated
            log OptimizationDemo("Dead code branch");
            return 777;
        }
        
        // Redundant condition check
        if (condition == true) {
            return 1;
        } else if (condition == false) {
            return 0;
        }
        
        return 42;  // This is unreachable but optimizer should detect it
    }
    
    pub fn boundsCheckDemo(index: u256) -> u256 {
        // Array of known size
        let fixed_array: slice[u256] = [1, 2, 3, 4, 5];
        
        // This bounds check could be eliminated if index is constant
        requires(index < 5);
        
        // If we can prove index is valid, this access doesn't need runtime bounds check
        return fixed_array[index];
    }
    
    pub fn transferOptimized(to: address, amount: u256) -> bool {
        // Pre-conditions (some redundant for demonstration)
        requires(amount > 0);
        requires(amount >= MIN_TRANSFER);  // This could be redundant if MIN_TRANSFER == 1
        requires(amount <= MAX_BALANCE);
        requires(to != std.transaction.sender);
        requires(!is_paused);
        requires(balances[std.transaction.sender] >= amount);
        
        // Postconditions with old() expressions
        ensures(balances[std.transaction.sender] == old(balances[std.transaction.sender]) - amount);
        ensures(balances[to] == old(balances[to]) + amount);
        ensures(total_supply == old(total_supply));  // Unchanged
        
        // The optimizer should be able to eliminate some runtime checks
        // based on the proven preconditions
        
        // This check is redundant with the requires clause
        if (amount == 0) {
            return false;  // Dead code - amount > 0 is required
        }
        
        // This check is also redundant
        if (balances[std.transaction.sender] < amount) {
            return false;  // Dead code - balance >= amount is required
        }
        
        // Perform the transfer
        balances[std.transaction.sender] -= amount;
        balances[to] += amount;
        
        log Transfer(std.transaction.sender, to, amount);
        return true;
    }
    
    pub fn loopOptimizationDemo(iterations: u256) -> u256 {
        requires(iterations > 0);
        requires(iterations <= 100);  // Prevent infinite loops
        
        let sum: u256 = 0;
        let i: u256 = 0;
        
        while (i < iterations) {
            // This invariant could allow loop optimizations
            invariant(i <= iterations);
            invariant(sum >= 0);
            
            // Constant checks inside loop - could be hoisted
            if (MAX_BALANCE > 0) {  // Always true, could be hoisted out
                sum += i;
            }
            
            // Redundant check inside loop
            if (i >= 0) {  // Always true for u256, could be eliminated
                i += 1;
            }
        }
        
        return sum;
    }
    
    pub fn complexOptimizationDemo(value: u256) -> u256 {
        // Multiple optimization opportunities
        requires(value > 0);
        requires(value < MAX_BALANCE);
        
        // Constant folding
        let base: u256 = 10 * 10;  // Should fold to 100
        
        // Dead code elimination
        if (false) {
            return 999;  // Dead code
        }
        
        // Tautology elimination
        if (value == value) {  // Always true
            // This condition check could be eliminated
        }
        
        // Redundant bounds check
        if (value < MAX_BALANCE) {  // Already required above
            // This check is redundant
        }
        
        // Complex constant expression
        let result: u256 = (base + 50) * 2 - (25 + 25);  // Should fold to 250
        
        return result + value;
    }
    
    // Function with intentional inefficiencies for optimization testing
    pub fn inefficientFunction(a: u256, b: u256) -> u256 {
        // Redundant computations
        let sum1: u256 = a + b;
        let sum2: u256 = a + b;  // Same as sum1 - could be optimized
        
        // Tautological conditions
        requires(a == a);
        requires(b >= b);
        requires(true);
        
        // Constant operations mixed with variables
        let result: u256 = sum1 + (10 + 20 + 30);  // Should fold constants to 60
        
        // Dead branches
        if (1 == 2) {
            return 0;  // Never executed
        } else if (2 == 2) {
            // Always executed
            return result;
        }
        
        return 0;  // Unreachable
    }
    
    // Function that should demonstrate significant optimization
    pub fn heavilyOptimizableFunction(x: u256) -> u256 {
        // Many redundant checks and constant operations
        requires(x > 0);
        requires(x >= 1);  // Redundant
        requires(x != 0);  // Redundant
        requires(true);    // Tautology
        requires(1 == 1);  // Tautology
        requires(x == x);  // Tautology
        
        // Constant folding opportunities
        let a: u256 = 1 + 2 + 3 + 4 + 5;  // Should fold to 15
        let b: u256 = 10 * 10;             // Should fold to 100
        let c: u256 = 1000 / 10;           // Should fold to 100
        
        // Dead code
        if (false) {
            return 999;
        }
        
        if (true) {
            return a + b + c + x;  // Should fold to 215 + x
        } else {
            return 0;  // Dead code
        }
        
        return 0;  // Unreachable
    }
} 