// Error Union Demo Contract
// Demonstrates the !T error union model for robust error handling

contract ErrorUnionDemo {
    // Error declarations
    error InsufficientBalance;
    error InvalidAddress;
    error TransferFailed;
    error AccessDenied;
    error AmountTooLarge;

    // Storage variables
    storage balances: map[address, u256];
    storage owner: address;

    // Initialize contract
    fn init(owner_address: address) -> !u256 {
        // Check for valid address
        if (owner_address == address(0)) {
            return error.InvalidAddress;
        }
        
        owner = owner_address;
        balances[owner_address] = 1000000;
        return 1000000; // Success case
    }

    // Transfer function with error union return
    fn transfer(to: address, amount: u256) -> !u256 {
        // Check for valid address
        if (to == address(0)) {
            return error.InvalidAddress;
        }

        // Check amount limit
        if (amount > 500000) {
            return error.AmountTooLarge;
        }

        // Get current balance (with error handling)
        let balance_result = try getBalance(msg.sender);
        
        // Use try-catch for error handling
        try {
            let current_balance = balance_result;
            
            // Check sufficient balance
            if (current_balance < amount) {
                return error.InsufficientBalance;
            }
            
            // Update balances
            balances[msg.sender] = current_balance - amount;
            balances[to] = balances[to] + amount;
            
            // Return new balance
            return balances[msg.sender];
        } catch(e) {
            // Propagate error
            return error.TransferFailed;
        }
    }

    // Get balance function with error union return
    fn getBalance(account: address) -> !u256 {
        if (account == address(0)) {
            return error.InvalidAddress;
        }
        
        return balances[account];
    }

    // Withdraw function with complex error handling
    fn withdraw(amount: u256) -> !u256 {
        // Only owner can withdraw
        if (msg.sender != owner) {
            return error.AccessDenied;
        }
        
        // Try to get balance with error handling
        let balance_result = try getBalance(msg.sender);
        
        // Use try-catch pattern
        try {
            let current_balance = balance_result;
            
            if (current_balance < amount) {
                return error.InsufficientBalance;
            }
            
            // Update balance
            balances[msg.sender] = current_balance - amount;
            
            // Return new balance
            return balances[msg.sender];
        } catch(err) {
            // Handle any error that occurred
            return error.TransferFailed;
        }
    }

    // Batch transfer with error union handling
    fn batchTransfer(recipients: slice[address], amounts: slice[u256]) -> !u256 {
        // Check input lengths match
        if (recipients.len != amounts.len) {
            return error.InvalidAddress;
        }
        
        let total_transferred: u256 = 0;
        
        // Process each transfer
        for (i in 0..recipients.len) {
            let transfer_result = try transfer(recipients[i], amounts[i]);
            
            // Handle individual transfer results
            try {
                let new_balance = transfer_result;
                total_transferred = total_transferred + amounts[i];
            } catch(transfer_error) {
                // If any transfer fails, return error
                return error.TransferFailed;
            }
        }
        
        return total_transferred;
    }

    // Helper function to check if a result is an error
    fn isError(result: !u256) -> bool {
        try {
            let value = result;
            return false; // Success case
        } catch(e) {
            return true; // Error case
        }
    }
    
    // Error union with Result[T, E] syntax
    fn safeDivide(a: u256, b: u256) -> Result[u256, u8] {
        if (b == 0) {
            return Result.error(1); // Division by zero error
        }
        
        return Result.ok(a / b);
    }

    // Public view functions
    pub fn getOwner() -> address {
        return owner;
    }
    
    pub fn checkBalance(account: address) -> !u256 {
        return getBalance(account);
    }
} 