// Demo of memory layout optimization for gas efficiency
contract MemoryLayoutDemo {
    // Example 1: Inefficient struct layout (before optimization)
    struct BadLayout {
        flag1: bool,    // 1 byte
        balance: u256,  // 32 bytes  
        flag2: bool,    // 1 byte
        counter: u32,   // 4 bytes
        flag3: bool,    // 1 byte
    }

    // Example 2: Efficient struct layout (manual optimization)  
    struct GoodLayout {
        balance: u256,  // 32 bytes
        counter: u32,   // 4 bytes
        flag1: bool,    // 1 byte
        flag2: bool,    // 1 byte  
        flag3: bool,    // 1 byte
    }

    // Storage variables - these will be automatically optimized for gas efficiency
    storage var bad_example: BadLayout;
    storage var good_example: GoodLayout;

    pub fn init() {
        // The compiler will optimize the layout of bad_example automatically
        // Demonstrating that field order in declaration doesn't affect gas costs
        bad_example = BadLayout {
            flag1: true,
            balance: 1000000,
            flag2: false,
            counter: 42,
            flag3: true,
        };

        good_example = GoodLayout {
            balance: 2000000,
            counter: 84,
            flag1: false,
            flag2: true,
            flag3: false,
        };
    }

    // This function demonstrates gas-efficient access to packed fields
    pub fn testPackedAccess() -> u32 {
        // These three boolean flags should be packed together with the counter
        // in the same storage slot after optimization, making this very gas-efficient
        var result: u32 = 0;
        
        if (bad_example.flag1) result += 1;
        if (bad_example.flag2) result += 2;  
        if (bad_example.flag3) result += 4;
        
        // Counter access should also be gas-efficient (same slot)
        result += bad_example.counter;
        
        return result;
    }

    // Test memory region optimization
    pub fn testMemoryOptimization() {
        // Local structs use stack-optimized layout
        let local_bad = BadLayout {
            flag1: true,
            balance: 500000,
            flag2: false,
            counter: 21,
            flag3: true,
        };

        // Memory variable uses memory-optimized layout
        memory var temp_good = GoodLayout {
            balance: 750000,
            counter: 63,
            flag1: true,
            flag2: false,
            flag3: true,
        };

        // These operations benefit from layout optimization
        temp_good.counter = local_bad.counter * 2;
    }
} 