contract StructComprehensiveTest {
    // Define multiple struct types to test complex scenarios
    struct Point {
        x: u32,
        y: u32,
    }

    struct Vector {
        magnitude: u256,
        direction: u32,
    }

    struct Person {
        name: string,
        age: u32,
        wallet: address,
        active: bool,
    }

    // Test different memory regions with struct types
    storage var global_origin: Point;
    storage let immutable_point: Point;
    memory var temp_vector: Vector;
    memory let readonly_person: Person;

    // Test immutable struct
    immutable default_person: Person;

    pub fn init() {
        // Initialize immutable struct (deployment-time only)
        default_person = Person {
            name: "Default User",
            age: 0,
            wallet: 0x0000000000000000000000000000000000000000,
            active: false,
        };

        // Initialize storage variables
        global_origin = Point { x: 0, y: 0 };
        immutable_point = Point { x: 100, y: 200 };

        // Initialize memory variables
        temp_vector = Vector { magnitude: 1000, direction: 45 };
        readonly_person = Person {
            name: "Temp User",
            age: 25,
            wallet: 0x1234567890123456789012345678901234567890,
            active: true,
        };
    }

    // Test struct field access
    pub fn getOriginX() -> u32 {
        return global_origin.x;
    }

    pub fn getOriginY() -> u32 {
        return global_origin.y;
    }

    pub fn getPersonName() -> string {
        return readonly_person.name;
    }

    pub fn getPersonAge() -> u32 {
        return readonly_person.age;
    }

    // Test struct mutation (respecting memory model)
    pub fn moveOrigin(newX: u32, newY: u32) {
        global_origin.x = newX;  // OK - storage var is mutable
        global_origin.y = newY;  // OK - storage var is mutable
        
        // These would be compile errors:
        // immutable_point.x = newX;  // ERROR - storage let is immutable
        // readonly_person.age = 30;  // ERROR - memory let is immutable
    }

    // Test struct assignment
    pub fn resetOrigin() {
        global_origin = Point { x: 0, y: 0 };  // OK - storage var is mutable
        
        // This would be a compile error:
        // immutable_point = Point { x: 50, y: 75 };  // ERROR - storage let is immutable
    }

    // Test local struct variables
    pub fn testLocalStructs() -> u32 {
        let immutable_local = Point { x: 10, y: 20 };
        var mutable_local = Point { x: 30, y: 40 };

        // This is OK
        mutable_local.x = 50;
        mutable_local = Point { x: 60, y: 70 };

        // This would be a compile error:
        // immutable_local.y = 25;  // ERROR - let is immutable

        return mutable_local.x + immutable_local.y;
    }

    // Test struct as function parameters
    pub fn calculateDistance(point1: Point, point2: Point) -> u256 {
        let dx = point1.x - point2.x;
        let dy = point1.y - point2.y;
        return (dx * dx) + (dy * dy);  // Simplified distance calculation
    }

    // Test struct return values
    pub fn createVector(mag: u256, dir: u32) -> Vector {
        return Vector {
            magnitude: mag,
            direction: dir,
        };
    }

    // Test nested struct operations
    pub fn swapPoints() {
        let temp = Point { x: global_origin.x, y: global_origin.y };
        global_origin.x = immutable_point.x;
        global_origin.y = immutable_point.y;
        // Note: Can't modify immutable_point, so this is a one-way swap
    }

    // Test struct with different data types
    pub fn updatePerson(newName: string, newAge: u32, newWallet: address) {
        temp_vector = Vector { magnitude: 500, direction: 90 };  // OK - memory var is mutable
        
        // This would be a compile error:
        // readonly_person.name = newName;  // ERROR - memory let is immutable
    }
} 