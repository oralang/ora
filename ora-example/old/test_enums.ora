// ==========================================
// ENUM DECLARATIONS PARSER TEST
// ==========================================
// This file tests the parser's ability to handle enum declarations
// with explicit values and usage in functions

// Basic enum with explicit values
enum TransferType : u8 {
    Standard = 0,          // Regular transfer
    Mint = 1,              // Creating new tokens
    Burn = 2,              // Destroying tokens
    Fee = 3                // Fee collection transfer
}

// Enum for status values
enum AccountStatus : u8 {
    Active = 0,            // Account can perform operations
    Frozen = 1,            // Account is temporarily frozen
    Locked = 2,            // Account is time-locked
    Suspended = 3          // Account is suspended by admin
}

// Contract demonstrating enum usage
contract EnumTest {
    // Storage variable for account status
    storage var status: AccountStatus;
    
    // Constructor to set initial status
    pub fn init() {
        status = AccountStatus.Active;  // Using enum value
    }
    
    // Function that uses enum as parameter
    pub fn process_transfer(transfer_type: TransferType, amount: u256) bool {
        // Switch statement with enum pattern matching
        switch (transfer_type) {
            TransferType.Standard => {
                // Standard transfer logic
                return true;
            },
            TransferType.Mint => {
                // Mint logic
                return true;
            },
            TransferType.Burn => {
                // Burn logic
                return true;
            },
            TransferType.Fee => {
                // Fee logic
                return true;
            }
        }
    }
    
    // Function that uses enum in return value
    pub fn get_current_status() AccountStatus {
        return status;
    }
    
    // Function that changes status based on conditions
    pub fn update_status(is_frozen: bool, is_locked: bool) {
        if (is_frozen) {
            status = AccountStatus.Frozen;
        } else if (is_locked) {
            status = AccountStatus.Locked;
        } else {
            status = AccountStatus.Active;
        }
    }
}
